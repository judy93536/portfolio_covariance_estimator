// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// portfolio_objective
double portfolio_objective(const arma::vec& weights, const arma::mat& returns, const arma::mat& cov_matrix, double risk_aversion);
RcppExport SEXP _PortfolioOptimizer_portfolio_objective(SEXP weightsSEXP, SEXP returnsSEXP, SEXP cov_matrixSEXP, SEXP risk_aversionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type cov_matrix(cov_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type risk_aversion(risk_aversionSEXP);
    rcpp_result_gen = Rcpp::wrap(portfolio_objective(weights, returns, cov_matrix, risk_aversion));
    return rcpp_result_gen;
END_RCPP
}
// deoptim_portfolio_rcpp
arma::vec deoptim_portfolio_rcpp(const arma::mat& returns, const arma::mat& cov_matrix, double min_weight, double max_weight, int pop_size, int max_iter, double F, double CR, int ncores, bool DEBUG);
RcppExport SEXP _PortfolioOptimizer_deoptim_portfolio_rcpp(SEXP returnsSEXP, SEXP cov_matrixSEXP, SEXP min_weightSEXP, SEXP max_weightSEXP, SEXP pop_sizeSEXP, SEXP max_iterSEXP, SEXP FSEXP, SEXP CRSEXP, SEXP ncoresSEXP, SEXP DEBUGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type cov_matrix(cov_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type min_weight(min_weightSEXP);
    Rcpp::traits::input_parameter< double >::type max_weight(max_weightSEXP);
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type F(FSEXP);
    Rcpp::traits::input_parameter< double >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type DEBUG(DEBUGSEXP);
    rcpp_result_gen = Rcpp::wrap(deoptim_portfolio_rcpp(returns, cov_matrix, min_weight, max_weight, pop_size, max_iter, F, CR, ncores, DEBUG));
    return rcpp_result_gen;
END_RCPP
}
// equal_weight_portfolio
arma::vec equal_weight_portfolio(int n_assets);
RcppExport SEXP _PortfolioOptimizer_equal_weight_portfolio(SEXP n_assetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_assets(n_assetsSEXP);
    rcpp_result_gen = Rcpp::wrap(equal_weight_portfolio(n_assets));
    return rcpp_result_gen;
END_RCPP
}
// portfolio_returns
arma::vec portfolio_returns(const arma::mat& returns, const arma::vec& weights);
RcppExport SEXP _PortfolioOptimizer_portfolio_returns(SEXP returnsSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(portfolio_returns(returns, weights));
    return rcpp_result_gen;
END_RCPP
}
// sharpe_ratio
double sharpe_ratio(const arma::vec& returns, double risk_free);
RcppExport SEXP _PortfolioOptimizer_sharpe_ratio(SEXP returnsSEXP, SEXP risk_freeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< double >::type risk_free(risk_freeSEXP);
    rcpp_result_gen = Rcpp::wrap(sharpe_ratio(returns, risk_free));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PortfolioOptimizer_portfolio_objective", (DL_FUNC) &_PortfolioOptimizer_portfolio_objective, 4},
    {"_PortfolioOptimizer_deoptim_portfolio_rcpp", (DL_FUNC) &_PortfolioOptimizer_deoptim_portfolio_rcpp, 10},
    {"_PortfolioOptimizer_equal_weight_portfolio", (DL_FUNC) &_PortfolioOptimizer_equal_weight_portfolio, 1},
    {"_PortfolioOptimizer_portfolio_returns", (DL_FUNC) &_PortfolioOptimizer_portfolio_returns, 2},
    {"_PortfolioOptimizer_sharpe_ratio", (DL_FUNC) &_PortfolioOptimizer_sharpe_ratio, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_PortfolioOptimizer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
